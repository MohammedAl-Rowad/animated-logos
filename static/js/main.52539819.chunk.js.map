{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["App","clouds","staggerVisualizerEl","document","querySelector","appendChild","fragment","createDocumentFragment","grid","waterGrids","this","getRange","filter","n","includes","numberOfElements","i","div","createElement","addEventListener","alert","cla","classList","add","anime","timeline","targets","easing","delay","stagger","loop","autoplay","rotate","from","direction","translateX","translateY","scale","axis","random","duration","play","length","start","cloudsNumber","newStart","newLength","arr","Array","map","slice","className","Component","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qSAIqBA,G,iNACXC,OAAwB,G,mFAEL,IAAD,OAClBC,EAAsBC,SAASC,cACnC,wBACG,CAAEC,YAAa,cAEdC,EAAWH,SAASI,yBACpBC,EAAO,CAAC,GAAI,IACZC,EAAU,sBACXC,KAAKC,SAAS,GAAI,IAAK,IADZ,YAEXD,KAAKC,SAAS,GAAI,IAAK,IAFZ,YAGXD,KAAKC,SAAS,EAAG,IAAK,IAHX,YAIXD,KAAKC,SAAS,EAAG,IAAK,IAJX,YAKXD,KAAKC,SAAS,EAAG,IAAK,IALX,YAMXD,KAAKC,SAAS,EAAG,IAAK,IANX,YAOXD,KAAKC,SAAS,EAAG,IAAK,KAE3BD,KAAKT,OAAS,sBACTS,KAAKT,QADI,CAEZ,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,MACAW,OACA,SAAAC,GAAC,OACE,CACC,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,IACA,KACAC,SAASD,KAIf,IA/DwB,IA8DlBE,EADaP,EA7DK,GA6DLA,EA7DK,cA+DfQ,GACP,IAAMC,EAAMd,SAASe,cAAc,OACnCD,EAAIE,iBAAiB,QAAS,kBAAMC,MAAMJ,KAC1C,IAAIK,EAAc,GAEhBA,EADE,EAAKpB,OAAOa,SAASE,GACjB,SACGP,EAAWK,SAASE,GACvB,QAEA,UAERC,EAAIK,UAAUC,IAAIF,GAClBf,EAASD,YAAYY,IAZdD,EAAI,EAAGA,EAAID,EAAkBC,IAAM,EAAnCA,GAcTd,EAAoBG,YAAYC,GACNkB,IACvBC,SAAS,CACRC,QAAS,0BAKTC,OAAQ,gBACRC,MAAOJ,IAAMK,QAAQ,IACrBC,MAAM,EACNC,UAAU,IAqBXR,IAAI,CACHS,OAAQR,IAAMK,QAAQ,EAAG,CACvBI,KAAM,SACNC,UAAW,UACXP,OAAQ,eAEVQ,WAAY,EACZC,WAAY,EACZR,MAAOJ,IAAMK,QAAQ,GAAI,CAAEI,KAAM,aAElCV,IAAI,CACHc,MAAOb,IAAMK,QAAQ,CAAC,EAAG,GAAI,CAAErB,KAAM,CAAC,EAAG,GAAI8B,KAAM,MACnDF,WAAYZ,IAAMK,QAAQ,EAAE,IAAK,KAAM,CAAErB,KAAM,CAAC,EAAG,GAAI8B,KAAM,MAC7DN,OAAQ,EACRJ,MAAOJ,IAAMK,QAAQ,EAAG,CAAEI,KAAM,WAEjCV,IAAI,CACHY,WAAY,kBAAMX,IAAMe,QAAQ,IAAK,MACrCH,WAAY,kBAAMZ,IAAMe,QAAQ,IAAK,MACrCF,MAAOb,IAAMK,QAAQ,CAAC,IAAK,IAAM,CAAEI,KAAM,WACzCD,OAAQR,IAAMK,QAAQ,CAAC,IAAK,IAAK,CAAEI,KAAM,SACzCL,MAAOJ,IAAMK,QAAQ,GAAI,CAAEI,KAAM,SAAUzB,KAAM,CAAC,EAAG,OAEtDe,IAAI,CACHY,WAAY,kBAAMX,IAAMe,QAAQ,IAAK,MACrCH,WAAY,kBAAMZ,IAAMe,QAAQ,IAAK,MACrCP,OAAQR,IAAMK,QAAQ,EAAE,GAAI,IAAK,CAAEI,KAAM,SACzCI,MAAO,EACPT,MAAOJ,IAAMK,QAAQ,GAAI,CAAEI,KAAM,SAAUzB,KAAM,CAAC,EAAG,OAEtDe,IAAI,CACHY,WAAY,EACZC,WAAYZ,IAAMK,QAAQ,EAAG,CAAEI,KAAM,SAAUC,UAAW,YAC1DF,OAAQ,EACRJ,MAAOJ,IAAMK,QAAQ,GAAI,CAAEI,KAAM,SAAUzB,KAAM,CAAC,EAAG,OAEtDe,IAAI,CACHY,WAAYX,IAAMK,QAAQ,OAAQ,CAChCrB,KAAM,CAAC,EAAG,GACVyB,KAAM,SACNK,KAAM,MAGRV,MAAOJ,IAAMK,QAAQ,IAAK,CACxBrB,KAAM,CAAC,EAAG,GACVyB,KAAM,SACNC,UAAW,cAGdX,IAAI,CACHY,WAAYX,IAAMK,QAAQ,CAAC,IAAK,IAAK,CAAEI,KAAM,UAC7CG,WAAY,EACZJ,OAAQR,IAAMK,QAAQ,CAAC,IAAK,IAAK,CAAEI,KAAM,UACzCL,MAAOJ,IAAMK,QAAQ,GAAI,CAAEI,KAAM,YAElCV,IAAI,CACHa,WAAYZ,IAAMK,QAAQ,EAAE,IAAK,MACjCG,OAAQ,kBAAMR,IAAMe,QAAQ,IAAK,MACjCF,MAAOb,IAAMK,QAAQ,CAAC,EAAG,GAAI,CAAEI,KAAM,WACrCL,MAAOJ,IAAMK,QAAQ,GAAI,CAAEI,KAAM,MAElCV,IAAI,CACHY,WAAY,EACZC,WAAY,EACZC,MAAO,EACPL,OAAQ,IACRQ,SAAU,IACVZ,MAAO,IAEOa,S,+BAIlBC,EACAC,EACAC,GAEA,IAAMC,EAAWF,EAAQC,EACnBE,EAAYJ,EAAwB,EAAfE,EACvBG,EAAMC,MAAMf,KAAa,CAAES,OAAQI,IAAaG,IAClD,eAACpC,EAAD,uDAAagC,EAAU7B,EAAvB,8CAA4C,IAANA,EAAUH,EAAIA,EAAIG,IAS1D,OAPAN,KAAKT,OAAL,sBACKS,KAAKT,QADV,YAEK8C,EAAIG,MAAM,EAAGN,IAFlB,YAGKG,EAAIG,MAAMH,EAAIL,OAASE,EAAcG,EAAIL,UAG9CK,EAAMA,EAAIG,MAAMN,EAAcF,EAASE,K,+BAKvC,OAAO,yBAAKO,UAAU,2B,GA7MOC,cCQbC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASxD,SAASyD,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.52539819.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport anime from 'animejs';\nimport './App.scss';\n\nexport default class App extends Component {\n  private clouds: Array<number> = [];\n\n  componentDidMount(): void {\n    const staggerVisualizerEl = document.querySelector(\n      '.stagger-visualizer'\n    ) || { appendChild: () => void 1 };\n\n    const fragment = document.createDocumentFragment();\n    const grid = [20, 17];\n    const waterGrids = [\n      ...this.getRange(13, 325, 2),\n      ...this.getRange(11, 309, 3),\n      ...this.getRange(9, 293, 4),\n      ...this.getRange(7, 277, 5),\n      ...this.getRange(5, 261, 6),\n      ...this.getRange(3, 245, 7),\n      ...this.getRange(1, 229, 8)\n    ];\n    this.clouds = [\n      ...this.clouds,\n      208,\n      209,\n      210,\n      211,\n      212,\n      213,\n      214,\n      215,\n      216,\n      192,\n      193,\n      194,\n      195,\n      196,\n      197,\n      198,\n      176,\n      177,\n      178,\n      179,\n      180\n    ].filter(\n      n =>\n        ![\n          206,\n          289,\n          272,\n          255,\n          238,\n          221,\n          222,\n          239,\n          223,\n          305,\n          288,\n          271,\n          254,\n          237,\n          253,\n          236,\n          235\n        ].includes(n)\n    );\n    const [col, row] = grid;\n    const numberOfElements = col * row;\n    for (let i = 0; i < numberOfElements; i++) {\n      const div = document.createElement('div');\n      div.addEventListener('click', () => alert(i));\n      let cla: string = '';\n      if (this.clouds.includes(i)) {\n        cla = 'clouds';\n      } else if (waterGrids.includes(i)) {\n        cla = 'water';\n      } else {\n        cla = 'logo-bg';\n      }\n      div.classList.add(cla);\n      fragment.appendChild(div);\n    }\n    staggerVisualizerEl.appendChild(fragment);\n    const staggersAnimation = anime\n      .timeline({\n        targets: '.stagger-visualizer div',\n        // scale: [\n        //   { value: 0.1, easing: 'easeOutSine', duration: 500 },\n        //   { value: 1, easing: 'easeInOutQuad', duration: 1200 }\n        // ],\n        easing: 'easeInOutSine',\n        delay: anime.stagger(50),\n        loop: true,\n        autoplay: false\n        // delay: anime.stagger(200, { grid: [14, 5], from: 'center' }),\n        // loop: true\n      })\n      // .add({\n      //   scale: anime.stagger([2.5, 1], { from: 'center', grid: [9, 9] }),\n      //   translateX: anime.stagger([-100, 100]),\n      //   rotate: anime.stagger([-45, 45]),\n      //   easing: 'easeInOutCirc',\n      //   delay: anime.stagger(10, { from: 'center' })\n      // })\n      // .add({\n      //   scale: anime.stagger([2.5, 1], {\n      //     from: 'center',\n      //     easing: 'easeInOutCirc'\n      //   }),\n      //   translateX: anime.stagger([-200, 200]),\n      //   translateY: anime.stagger([-200, 200]),\n      //   rotate: 0,\n      //   delay: anime.stagger(1, { from: 'last' })\n      // })\n      .add({\n        rotate: anime.stagger(2, {\n          from: 'center',\n          direction: 'reverse',\n          easing: 'easeInSine'\n        }),\n        translateX: 0,\n        translateY: 0,\n        delay: anime.stagger(10, { from: 'center' })\n      })\n      .add({\n        scale: anime.stagger([2, 1], { grid: [9, 9], axis: 'y' }),\n        translateY: anime.stagger([-100, 200], { grid: [9, 9], axis: 'y' }),\n        rotate: 0,\n        delay: anime.stagger(1, { from: 'last' })\n      })\n      .add({\n        translateX: () => anime.random(-100, 100),\n        translateY: () => anime.random(-100, 100),\n        scale: anime.stagger([1.5, 0.5], { from: 'center' }),\n        rotate: anime.stagger([10, -10], { from: 'last' }),\n        delay: anime.stagger(50, { from: 'center', grid: [9, 9] })\n      })\n      .add({\n        translateX: () => anime.random(-100, 100),\n        translateY: () => anime.random(-100, 100),\n        rotate: anime.stagger([-10, 10], { from: 'last' }),\n        scale: 1,\n        delay: anime.stagger(50, { from: 'center', grid: [9, 9] })\n      })\n      .add({\n        translateX: 0,\n        translateY: anime.stagger(6, { from: 'center', direction: 'reverse' }),\n        rotate: 0,\n        delay: anime.stagger(50, { from: 'center', grid: [9, 9] })\n      })\n      .add({\n        translateX: anime.stagger('1rem', {\n          grid: [9, 9],\n          from: 'center',\n          axis: 'x'\n        }),\n        //translateY: anime.stagger('1rem', {grid: [9, 9], from: 'center', axis: 'y'}),\n        delay: anime.stagger(200, {\n          grid: [9, 9],\n          from: 'center',\n          direction: 'reverse'\n        })\n      })\n      .add({\n        translateX: anime.stagger([25, -25], { from: 'first' }),\n        translateY: 0,\n        rotate: anime.stagger([40, -40], { from: 'first' }),\n        delay: anime.stagger(10, { from: 'first' })\n      })\n      .add({\n        translateY: anime.stagger([-240, 240]),\n        rotate: () => anime.random(-100, 100),\n        scale: anime.stagger([1, 3], { from: 'center' }),\n        delay: anime.stagger(10, { from: 0 })\n      })\n      .add({\n        translateX: 0,\n        translateY: 0,\n        scale: 1,\n        rotate: 360,\n        duration: 2000,\n        delay: 0\n      });\n    staggersAnimation.play();\n  }\n\n  private getRange(\n    length: number,\n    start: number,\n    cloudsNumber: number\n  ): Array<number> {\n    const newStart = start - cloudsNumber;\n    const newLength = length + cloudsNumber * 2;\n    let arr = Array.from<number>({ length: newLength }).map(\n      (n: number = newStart, i: number) => (i === 0 ? n : n + i)\n    );\n    this.clouds = [\n      ...this.clouds,\n      ...arr.slice(0, cloudsNumber),\n      ...arr.slice(arr.length - cloudsNumber, arr.length)\n    ];\n\n    arr = arr.slice(cloudsNumber, length + cloudsNumber);\n    return arr;\n  }\n\n  render() {\n    return <div className=\"stagger-visualizer\"></div>;\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}